{"version":3,"sources":["Card.js","CardList.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","robots_array","username","App","mySearchFun","event","setState","searchfield","target","value","state","date1","Date","setInterval","tick1","this","filteredRobots","filter","toLowerCase","includes","toLocaleTimeString","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OAEC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAMF,GACN,2BAAKC,MCYMK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCbXW,EAAe,CAC5B,CACCV,GAAI,EACJF,KAAM,WACNa,SAAU,QACVZ,MAAO,qBAER,CACCC,GAAI,EACJF,KAAM,WACNa,SAAU,QACVZ,MAAO,qBAER,CACCC,GAAI,EACJF,KAAM,aACNa,SAAU,UACVZ,MAAO,uBAER,CACCC,GAAI,EACJF,KAAM,cACNa,SAAU,OACVZ,MAAO,oBAER,CACCC,GAAI,EACJF,KAAM,WACNa,SAAU,QACVZ,MAAO,qBAER,CACCC,GAAI,EACJF,KAAM,QACNa,SAAU,QACVZ,MAAO,qBAER,CACCC,GAAI,EACJF,KAAM,YACNa,SAAU,SACVZ,MAAO,sBAER,CACCC,GAAI,EACJF,KAAM,SACNa,SAAU,MACVZ,MAAO,oBCSOa,G,6DAjDd,aAAe,IAAD,8BACb,gBAsBDC,YAAc,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAtB1C,EAAKC,MAAQ,CAEZd,OAAQK,EACRM,YAAa,GACbI,MAAQ,IAAIC,MANA,E,gEAUU,IAAD,OAClBC,aAAY,kBAAM,EAAKC,UACrB,O,8BAKFC,KAAKT,SAAS,CACZK,MAAO,IAAIC,S,+BASR,IAAD,OACFI,EAAiBD,KAAKL,MAAMd,OAAOqB,QAAO,SAAArB,GAC/C,OAAOA,EAAOP,KAAK6B,cAAcC,SAAS,EAAKT,MAAMH,YAAYW,kBAElE,OACC,yBAAK1B,UAAY,MAChB,wBAAIA,UAAY,MAAhB,mBACA,qCAAWuB,KAAKL,MAAMC,MAAMS,qBAA5B,KACA,6BACC,2BACC5B,UAAU,mCACV6B,KAAK,SACLC,YAAY,gBACZC,SAAUR,KAAKX,eAGjB,kBAAC,EAAD,CAAUR,OAAQoB,S,GA5CJQ,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7ec19028.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\t//const { name, email, id} = props; // Destructure make name = props.name\r\n\treturn (\r\n\t\t//<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<div className='tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{ name }</h2>\r\n\t\t\t\t<p>{ email }</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default CardList;","export const robots_array = [\r\n{\r\n\tid: 1,\r\n\tname: 'Chris Ho',\r\n\tusername: 'Chris',\r\n\temail: 'chris@hkmouse.com'\r\n},\r\n{\r\n\tid: 2,\r\n\tname: 'Yanis Ho',\r\n\tusername: 'Yanis',\r\n\temail: 'yanis@hkmouse.com'\r\n},\r\n{\r\n\tid: 3,\r\n\tname: 'Evellin Ho',\r\n\tusername: 'Evellin',\r\n\temail: 'evellin@hkmouse.com'\r\n},\r\n{\r\n\tid: 4,\r\n\tname: 'Yoie Cheung',\r\n\tusername: 'Yoie',\r\n\temail: 'yoie@hkmouse.com'\r\n},\r\n{\r\n\tid: 5,\r\n\tname: 'Jason Ho',\r\n\tusername: 'Jason',\r\n\temail: 'jason@hkmouse.com'\r\n},\r\n{\r\n\tid: 6,\r\n\tname: 'Ellen',\r\n\tusername: 'Ellen',\r\n\temail: 'ellen@hkmouse.com'\r\n},\r\n{\r\n\tid: 7,\r\n\tname: 'Prollo Ho',\r\n\tusername: 'Prollo',\r\n\temail: 'prollo@hkmouse.com'\r\n},\r\n{\r\n\tid: 8,\r\n\tname: 'Fan Ho',\r\n\tusername: 'Fan',\r\n\temail: 'fan@hkmouse.com'\r\n},\r\n]","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport {robots_array } from './robots';\r\nimport 'tachyons';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\t// Var Name : Init Value\r\n\t\t\trobots: robots_array,\r\n\t\t\tsearchfield: '',\r\n\t\t\tdate1:  new Date()\r\n\t\t};\r\n\t}\r\n\t\t// Like a Start\r\n\t  \tcomponentDidMount() {\r\n\t\t    setInterval(() => this.tick1(),\r\n\t\t      1000\r\n\t\t    );\r\n\t  \t}\r\n\r\n\t\ttick1() {\r\n\t\t    this.setState({\r\n\t\t      date1: new Date()\r\n\t\t    });\r\n\t\t    //this.setState({ searchfield: \"Yanis\" })\r\n\t\t  }\r\n\t\r\n\tmySearchFun = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robots => {\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t\t<h1 className = 'f1'>RoboFriends New</h1>\r\n\t\t\t\t<h2>It is {this.state.date1.toLocaleTimeString()}.</h2>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t\t\ttype='search' \r\n\t\t\t\t\t\tplaceholder='search robots' \r\n\t\t\t\t\t\tonChange={this.mySearchFun}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}